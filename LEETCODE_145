#QUESTION:
#BINARY TREE POSTORDER TRAVERSAL.
#Given the root of a binary tree, return the postorder traversal of its nodes' values.

#Example 1:
#Input: root = [1,null,2,3]
#Output: [3,2,1]

#Example 2:
#Input: root = []
#Output: []

#Example 3:
#Input: root = [1]
#Output: [1]
 
#Constraints:
#The number of the nodes in the tree is in the range [0, 100].
#-100 <= Node.val <= 100

#ANSWER:
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
#class Solution:
#    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
#       res = []
#       stack = [root]
#       while stack:
#            node = stack.pop()
#            if node:
#                res.append(node.val)
#                stack.append(node.left)
#                stack.append(node.right)
#       return res[::-1]

class solution:
    def postorder(self,root):
        def dfs(root,result):
            if not root:
                return
            dfs(root.left,result)
            dfs(root.right,result)
            result.append(root.val)
            return result
        if not root:
          return []
        return dfs(root,[])  
